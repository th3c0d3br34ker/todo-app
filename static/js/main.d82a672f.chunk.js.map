{"version":3,"sources":["serviceWorker.js","components/todoItem.jsx","components/todoBody.jsx","components/todoForm.jsx","components/todoApp.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Item","styled","div","StyledInput","input","StyledSpan","span","DeleteButton","button","TodoItem","props","name","text","type","id","checked","complete","value","onChange","toggleComplete","htmlFor","style","textDecoration","onClick","onDeleteTask","TodoBodyContainer","TodoBody","TransitionGroup","component","tasks","map","task","CSSTransition","key","timeout","classNames","deleteTodo","StyledForm","form","AddButton","TodoForm","useState","setText","handleSubmit","event","preventDefault","onSubmit","parseInt","Date","now","placeholder","target","aria-label","role","TodoHeading","h1","TodoHeadingWrapper","TodoMain","TodoApp","setTask","useEffect","data","JSON","parse","localStorage","getItem","setItem","stringify","filter","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d82a672f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Item = styled.div`\r\n  display: block;\r\n  padding: 8px;\r\n  // border: 2px solid red;\r\n  background-color: #00b4d8;\r\n  border-radius: 0 8px;\r\n  margin: 8px 0;\r\n  width: inherit;\r\n  height: 24px;\r\n  box-shadow: 2px 4px 4px #fff;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  line-height: 1.2;\r\n  margin-right: 4px;\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  min-width: 380px;\r\n  padding: 8px 4px;\r\n  text-transform: uppercase;\r\n  font-weight: 600;\r\n  color: white;\r\n`;\r\n\r\nconst DeleteButton = styled.button`\r\n  color: white;\r\n  border-radius: 4px;\r\n  float: right;\r\n  background-color: #e41d1d;\r\n  outline: none;\r\n  border: none;\r\n  padding: 4px 8px;\r\n  margin-right: 8px;\r\n  box-shadow: 1px 1px 4px #fff;\r\n  transition: all 200ms ease;\r\n\r\n  &:hover {\r\n    background-color: #ff0000;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nexport default function TodoItem(props) {\r\n  return (\r\n    <Item>\r\n      <StyledInput\r\n        name={props.text}\r\n        type=\"checkbox\"\r\n        id={props.id}\r\n        checked={props.complete}\r\n        value={props.text}\r\n        onChange={props.toggleComplete}\r\n      />\r\n      <label htmlFor={props.id}>\r\n        <StyledSpan\r\n          style={{\r\n            textDecoration: props.complete ? \"line-through\" : \"none\",\r\n          }}\r\n        >\r\n          {props.text}\r\n        </StyledSpan>\r\n      </label>\r\n      <DeleteButton onClick={props.onDeleteTask}> X </DeleteButton>\r\n    </Item>\r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  id: propTypes.number,\r\n  text: propTypes.string,\r\n  complete: propTypes.bool,\r\n  toggleComplete: propTypes.func,\r\n  onDeleteTask: propTypes.func,\r\n};\r\n","import { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nimport React from \"react\";\r\nimport TodoItem from \"./todoItem\";\r\nimport propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TodoBodyContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  // border: 2px solid green;\r\n  max-height: 400px;\r\n  min-height: 435px;\r\n  overflow: hidden;\r\n  overflow-y: scroll;\r\n\r\n  /* width */\r\n  &::-webkit-scrollbar {\r\n    width: 8px;\r\n  }\r\n\r\n  /* Track */\r\n  &::-webkit-scrollbar-track {\r\n    background: #03045e;\r\n  }\r\n\r\n  /* Handle */\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #00b4d8;\r\n    border-radius: 8px;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: #fff;\r\n  }\r\n\r\n  // Transition\r\n  .transition-enter {\r\n    opacity: 0.01;\r\n  }\r\n  .transition-enter-active {\r\n    opacity: 1;\r\n    transition: all 0.4s ease-out;\r\n  }\r\n  .transition-exit {\r\n    opacity: 1;\r\n  }\r\n  .transition-exit-active {\r\n    opacity: 0.01;\r\n    transition: all 0.4s ease-in;\r\n  }\r\n`;\r\n\r\nexport default function TodoBody(props) {\r\n  return (\r\n    <TransitionGroup component={TodoBodyContainer}>\r\n      {props.tasks.map((task) => (\r\n        <CSSTransition key={task.id} timeout={400} classNames=\"transition\">\r\n          <TodoItem\r\n            id={task.id}\r\n            complete={task.complete}\r\n            toggleComplete={() => props.toggleComplete(task.id)}\r\n            text={task.text}\r\n            onDeleteTask={() => props.deleteTodo(task.id)}\r\n          />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n}\r\n\r\nTodoBody.propTypes = {\r\n  tasks: propTypes.array,\r\n  toggleComplete: propTypes.func,\r\n  deleteTodo: propTypes.func,\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledForm = styled.form`\r\n  margin: 0;\r\n  // border: 2px solid blue;\r\n  padding: 16px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  width: 300px;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  outline: none;\r\n  border: transparent;\r\n  box-shadow: 2px 4px 2px #90e0f0;\r\n`;\r\n\r\nconst AddButton = styled.button`\r\n  float: right;\r\n  width: 50px;\r\n  border-radius: 8px;\r\n  background-color: #00b4d8;\r\n  border: transparent;\r\n  padding: 8px;\r\n  outline: none;\r\n  box-shadow: 2px 4px 2px #90e0f0;\r\n  transition: all 200ms ease;\r\n\r\n  &:hover {\r\n    background-color: #eee;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nexport default function TodoForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    [event.target.name] = event.target.value;\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (text !== \"\") {\r\n      props.onSubmit({\r\n        id: parseInt(Date.now() % 10000, 10),\r\n        text: text,\r\n        complete: false,\r\n      });\r\n      setText(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={handleSubmit}>\r\n      <StyledInput\r\n        name=\"text\"\r\n        placeholder=\"Enter Task\"\r\n        value={text}\r\n        onChange={handleChange}\r\n      />\r\n      <AddButton onClick={handleSubmit}>\r\n        <span aria-label=\"add\" role=\"img\">\r\n          ➕\r\n        </span>\r\n      </AddButton>\r\n    </StyledForm>\r\n  );\r\n}\r\n\r\nTodoForm.propTypes = {\r\n  onSubmit: propTypes.func,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport TodoBody from \"./todoBody.jsx\";\r\nimport TodoForm from \"./todoForm.jsx\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TodoHeading = styled.h1`\r\n  color: white;\r\n`;\r\n\r\nconst TodoHeadingWrapper = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n`;\r\n\r\nconst TodoMain = styled.div`\r\n  display: block;\r\n  min-width: 420px;\r\n  max-height: 640px;\r\n\r\n  // border: 2px solid violet;\r\n  background-color: #03045e;\r\n  border-radius: 0 32px;\r\n  box-shadow: 8px 8px 16px 2px #caf0f8;\r\n`;\r\n\r\nexport default function TodoApp() {\r\n  const [tasks, setTask] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem(\"todo-app-data\"));\r\n    if (data) {\r\n      setTask(data);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todo-app-data\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const addTodo = (task) => {\r\n    setTask([...tasks, task]);\r\n  };\r\n\r\n  const toggleComplete = (id) => {\r\n    setTask(\r\n      tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return {\r\n            ...task,\r\n            complete: !task.complete,\r\n          };\r\n        } else {\r\n          return task;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const deleteTodo = (id) => {\r\n    setTask(tasks.filter((tasks) => tasks.id !== id));\r\n  };\r\n\r\n  return (\r\n    <TodoMain>\r\n      <TodoHeadingWrapper>\r\n        <TodoHeading>\r\n          <span aria-label=\"note\" role=\"img\">\r\n            📝\r\n          </span>{\" \"}\r\n          TO DO APP\r\n        </TodoHeading>\r\n      </TodoHeadingWrapper>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <TodoBody\r\n        tasks={tasks}\r\n        toggleComplete={toggleComplete}\r\n        deleteTodo={deleteTodo}\r\n      />\r\n    </TodoMain>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport TodoApp from \"./components/todoApp.jsx\";\r\n\r\nexport default function App() {\r\n  return <TodoApp />;\r\n}\r\n","import \"./index.css\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}